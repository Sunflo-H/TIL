// 문제
// 인하대학교 학생회에서는 중간, 기말고사 때마다 시험 공부에 지친 학우들을 위해 간식을 나눠주는 간식 드리미 행사를 실시한다. 승환이는 시험 기간이 될 때마다 간식을 받을 생각에 두근두근 설레서 시험 공부에 집중을 못 한다. 이번 중간고사에서도 역시 승환이는 설레는 가슴을 안고 간식을 받기 위해 미리 공지된 장소에 시간 맞춰 도착했다. 그런데 이게 무슨 날벼락인가! 그 곳에는 이미 모든 학생들이 모여있었고, 승환이는 마지막 번호표를 받게 되었다. 설상가상으로 몇몇 양심에 털이 난 학생들이 새치기를 거듭한 끝에 대기열의 순서마저 엉망이 되고 말았다. 간식을 나눠주고 있던 인규는 학우들의 터져 나오는 불만에 번호표 순서로만 간식을 줄 수 있다고 말했다.

// 그제야 학생들이 순서대로 줄을 서려고 했지만 공간이 너무 협소해서 마음대로 이동할 수 없었다. 다행히도 대기열의 왼쪽에는 1열로 설 수 있는 공간이 존재하여 이 공간을 잘 이용하면 모두가 순서대로 간식을 받을 수 있을지도 모른다. 자칫 간식을 못 받게 될지도 모른다는 위기감을 느낀 승환이는 자신의 컴퓨터 알고리즘적 지식을 활용해 과연 모든 사람들이 순서대로 간식을 받을 수 있는지 확인하는 프로그램을 만들기로 했다. 만약 불가능 하다면 승환이는 이번 중간고사를 망치게 될 것 이고 가능하다면 힘을 얻어 중간고사를 잘 볼 수 있을지도 모른다.

// 사람들은 현재 1열로 줄을 서있고, 맨 앞의 사람만 이동이 가능하다. 인규는 번호표 순서대로만 통과할 수 있는 라인을 만들어 두었다. 이 라인과 대기열의 맨 앞 사람 사이에는 한 사람씩 1열이 들어갈 수 있는 공간이 있다. 현재 대기열의 사람들은 이 공간으로 올 수 있지만 반대는 불가능하다. 승환이를 도와 프로그램을 완성하라.

// 현재 간식 배부 공간을 그림으로 나타내면 다음과 같다.

// 위 예제는 다음 그림과 같이 움직였을 때 모두가 순서대로 간식을 받을 수 있다..

// 입력
// 입력의 첫째 줄에는 현재 승환이의 앞에 서 있는 학생들의 수 N(1 ≤ N ≤ 1,000,자연수)이 주어진다.

// 다음 줄에는 승환이 앞에 서있는 모든 학생들의 번호표(1,2,...,N) 순서가 앞에서부터 뒤 순서로 주어진다.

// 출력
// 승환이가 무사히 간식을 받을 수 있으면 "Nice"(따옴표는 제외)를 출력하고 그렇지 않다면 "Sad"(따옴표는 제외)를 출력한다.

// 해결법
// 1. stack을 하나 만들어서 arr[0]이 1이 될때까지 stack에 저장 (push)
// 2. arr[0]이 1이면 제거 (arr.shift())
// 3. arr[0]이 2면 제거 BUT 3이지! 그러면 stack에 저장 (push)
// 4. arr[0]이 2니까 제거 (arr.shift())
// 5. 이런식으로 arr이 모두 비워지면 이제 stack의 값들이 arr로는 다시 못가 따라서 이때! stack이 순서대로 되어있어야해 (내림차순이지)
// ! 5-1 arr.length ===0이면 stack을 확인하고, stack === stack.sort(a,b => b-a) 이면 Nice, 아니면 Sad // 이걸 확인하는게 이렇게 하면 안되네 내림차순 정렬한거랑 틀려도 같다고 나오네
// ! 아니야 싹다 틀렸어 이렇게 접근하면 안돼

//* 해결법 2
// 1번부터 쭉 뽑는거잖아, 그리고 1개의 배열과 1개의 스택이 있어
// 1. 배열[0]에서 1번인지 확인 맞으면 배열.shift() 후 2번을 찾아 다시 반복
// 2. 배열[0]이 아니면 스택[스택.length -1] 도 확인해봐 맞으면 스택.pop() 하고 3번을 찾아
// 3. 배열[0]에도 없고, 스택[스택.length -1]에도 없으면 스택push(배열[0])
// 4. 1번부터 다시 반복

const input = require("fs")
  .readFileSync("input.txt")
  .toString()
  .trim()
  .split("\n");
const N = input.shift();
let arr = input[0].split(" ").map(Number);

let target = 1;

let stack = [];

let answer = "";
while (target <= N) {
  console.log("찾고싶어 : ", target);
  console.log("배열 찾아보자 : ", arr[0]);
  console.log("스택 찾아보자 : ", stack[stack.length - 1]);
  if (arr[0] === target) {
    console.log("배열에 있네");
    arr.shift();
    target++;
  } else if (stack[stack.length - 1] === target) {
    console.log("스택에 있네");
    stack.pop();
    target++;
  } else {
    if (arr[0] === undefined) {
      answer = "Sad";
      break;
    }

    stack.push(arr.shift());
    console.log("어디에도 없네 스택에 저장하자", stack);
  }
}

answer !== "Sad" ? console.log("Nice") : console.log("Sad");
